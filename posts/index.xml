<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on archbishopsec</title>
		<link>https://archb1sh0p.github.io/posts/</link>
		<description>Recent content in Posts on archbishopsec</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Mon, 18 May 2020 22:28:47 +1000</lastBuildDate>
		<atom:link href="https://archb1sh0p.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Powershell Working With AD and Variables</title>
			<link>https://archb1sh0p.github.io/posts/powershell-working-with-ad-and-variables/</link>
			<pubDate>Mon, 18 May 2020 22:28:47 +1000</pubDate>
			
			<guid>https://archb1sh0p.github.io/posts/powershell-working-with-ad-and-variables/</guid>
			<description>This is going to be the first in a series of posts chronicling my journey with PowerShell:
See here for the details, I shan&amp;rsquo;t bore you again.
Setting the scene&amp;hellip; I recently found myself in a position with a client where they passed on a request that was: “Our CISO has requested that we go out and find all privileged service accounts”
For this particular client service accounts are identified with “SRV_ACC” at the start of the username.</description>
			<content type="html"><![CDATA[<p>This is going to be the first in a series of posts chronicling my journey with PowerShell:</p>
<p>See <a href="https://archb1sh0p.github.io/posts/how-to-powershell-more-betterer/">here</a> for the details, I shan&rsquo;t bore you again.</p>
<h3 id="setting-the-scene">Setting the scene&hellip;</h3>
<p>I recently found myself in a position with a client where they passed on a request that was: <em>“Our CISO has requested that we go out and find all privileged service accounts”</em></p>
<p>For this particular client service accounts are identified with “SRV_ACC” at the start of the username. So that does make it slightly easier, but how do we determine a level of privilege?</p>
<h2 id="get-adgroupmember">Get-AdGroupMember</h2>
<p>Microsoft have a lovely collection of PowerShell cmdlets that you can install by adding it as feature in Windows or by <a href="https://support.microsoft.com/en-au/help/2693643/remote-server-administration-tools-rsat-for-windows-operating-systems">downloading and installing the package</a></p>
<p>After some rumaging around on the <a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration/get-adgroupmember">Get-AdGroupMember Docs Page</a> I found this handy dandy paramater:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">-Recursive
</code></pre></div><p>-Recursive <em>Specifies that the cmdlet get all members in the hierarchy of a group that do not contain child objects .If the specified group does not have any members, then nothing is returned</em></p>
<p>Perfect This is great, I can just:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-AdGroupMember -Identity <span style="color:#e6db74">&#34;Domain Admins&#34;</span> -Recursive | Where-Object name <span style="color:#f92672">-Like</span> <span style="color:#e6db74">&#34;SVC*&#34;</span>
</code></pre></div><p>This will give me an output similar to this (but only for service accounts):</p>
<p><img src="/static/pwrshell-screen1.png" alt="Powershell Screenshot"></p>
<p>This was good, this is what the client wanted, but I wanted to go further and maybe make it easier for myself and maybe colleagues to run again.</p>
<p>All Builtin AD groups have an initial security identifier of S-1-5-32 and S-1-5-21. <a href="https://support.microsoft.com/en-au/help/243330/well-known-security-identifiers-in-windows-operating-systems">Here is a list of all well-known security identifiers in Windows operating systems</a>. Enumerating all members of these groups is a great starting place to identify privileged. However not all of them give privileged access. You can see them by running</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-ADGroup -ResultSetSize $null -Filter * -Properties GroupType |Where-Object {$_.SID <span style="color:#f92672">-like</span> <span style="color:#e6db74">&#34;S-1-5-32-*&#34;</span>} | <span style="color:#66d9ef">foreach</span> {$_.name}
</code></pre></div><p>Sean Metcalf has some great <a href="https://adsecurity.org/?p=3700">resources</a> about groups that are important in active directory, and you should absolutely go and read everything on his site as he is a proper AD wizard.</p>
<p><em>Note: AD groups can be provisioned administrative access as part of group policy. ie. adding certain groups to administrators on servers or computers, but this was not in scope for this work, so it was not explored. Probably a more suitable task for something like bloodhound, I wanted to keep this pretty simple for now.</em></p>
<h3 id="brief-intro-to-powershell-variables">Brief intro to PowerShell variables</h3>
<h3 id="regular-variables">Regular Variables</h3>
<p>In a nutshell, a variable is just a place in memory to store information. Hence the name, a variable can be whatever you want it to be and in PowerShell it can contain several different types of values. It can contain a large one liner, or it can contain the output of several commands chained together. Great video explaining variables <a href="https://www.youtube.com/watch?v=G41G_PEWFjE">here</a></p>
<p>Variables in PowerShell are set using $x = yz, For example. I can set the output of a command to be CoolVariable:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$CoolVariable = Get-Process
</code></pre></div><p>That will store the output of the Get-Process command in $CoolVariable.</p>
<p>One thing that is important to remember is variable type. Variables can contain many different types. You can determine the variable type by using the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$CoolVariable = Get-Process
$CoolVariable.GetType().FullName
</code></pre></div><p>This will show you for the example above, that we are working with a type of “System.Object” (which is technically an array)</p>
<p>There are many other types. Integers, strings and booleans can all be stored in a variable. If you want to set the type of variable you are using you can set it like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#66d9ef">[string]</span>$CoolVariable = <span style="color:#e6db74">&#34;FancyString&#34;</span>
</code></pre></div><h3 id="pipeline-variables-_">Pipeline Variables ($_)</h3>
<p>PowerShell is very powerful due to it’s usage of objects (vs lets say bash which is mainly manipulation of text). What we use above is called a pipeline variable. It’s in essence a time saving venture. It saves us from having to declare a variable and just treats information in the pipeline as a variable.</p>
<p>Heres an example without using a pipeline variable:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$process = get-process$Processes | Where-Object {$Processes.ProcessName -contain <span style="color:#e6db74">&#34;winlogon&#34;</span>}
</code></pre></div><p>And here is with a pipeline variable</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Get-Process | Where-Object {$_.ProcessName <span style="color:#f92672">-contains</span> <span style="color:#e6db74">&#34;winlogon&#34;</span>}
</code></pre></div><h3 id="arrays-or-list-of-items">Arrays or list of items</h3>
<p>An array is a fixed size collection of elements, a good way to think about it is they are like a collection of variables or objects.</p>
<p>Very similar to how a standard variable works, but you separate each item in the variable with commas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Groups = <span style="color:#e6db74">&#34;Administrators&#34;</span>,<span style="color:#e6db74">&#34;Users&#34;</span>, <span style="color:#e6db74">&#34;Remote Desktop Users&#34;</span>
</code></pre></div><h3 id="solving-our-problem">Solving our problem</h3>
<p>So the best way to enumerate all the relevant groups was to:</p>
<ul>
<li>Create array with groups that are &ldquo;privileged&rdquo;</li>
<li>Loop through get-adgroupmember -recursive to get all the members of all the groups</li>
</ul>
<p>This ended up looking like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">$PrivilegeGroups = <span style="color:#e6db74">&#34;Administrators&#34;</span>,<span style="color:#e6db74">&#34;DNSadmins&#34;</span>, <span style="color:#e6db74">&#34;Account Operators&#34;</span>, <span style="color:#e6db74">&#34;Server Operators&#34;</span>, <span style="color:#e6db74">&#34;Schema Admins&#34;</span>
$PrivilegeUsers = <span style="color:#66d9ef">foreach</span> ($group <span style="color:#66d9ef">in</span> $PrivilegeGroups) 
{
    Get-ADGroupMember $group -Recursive | Select-Object name

}
$PrivilegeUsers | Where-Object name <span style="color:#f92672">-Like</span> <span style="color:#e6db74">&#34;srv*&#34;</span>
</code></pre></div><p><a href="https://github.com/archb1sh0p/powershell">https://github.com/archb1sh0p/powershell</a></p>
<p>(probably best to work with the code here on GitHub, as this code here on the site will not be updated)</p>
<h2 id="up-next">Up next</h2>
<p>Further reading</p>
<ul>
<li>Highly recommend the PowerShell Cookbook by <a href="https://twitter.com/lee_holmes">Lee Holmes</a> However is is quite exhaustive, but it’s an excellent resource</li>
<li><a href="https://blog.netwrix.com/2018/10/04/powershell-variables-and-arrays/">Great Article exploring Variables and Arrays in powershell</a></li>
</ul>
<p>Thanks for reading</p>
]]></content>
		</item>
		
		<item>
			<title>How to PowerShell More Betterer</title>
			<link>https://archb1sh0p.github.io/posts/how-to-powershell-more-betterer/</link>
			<pubDate>Sat, 16 May 2020 21:39:49 +1000</pubDate>
			
			<guid>https://archb1sh0p.github.io/posts/how-to-powershell-more-betterer/</guid>
			<description>Why? There are thousands of blogs, posts and resources out there already about PowerShell, did we really some other numpty sharing their thoughts? This is the question I asked myself when the thought first flashed across my mind, &amp;ldquo;I could make a blog&amp;rdquo;. Making a blog is pretty easy these days, but apparently an important part of having a blog is actually having content on it, and given that I don&amp;rsquo;t have anything new to share or any cool tools to release.</description>
			<content type="html"><![CDATA[<h1 id="why">Why?</h1>
<h3 id="there-are-thousands-of-blogs-posts-and-resources-out-there-already-about-powershell-did-we-really-some-other-numpty-sharing-their-thoughts">There are thousands of blogs, posts and resources out there already about PowerShell, did we really some other numpty sharing their thoughts?</h3>
<p>This is the question I asked myself when the thought first flashed across my mind, &ldquo;I could make a blog&rdquo;. Making a blog is pretty easy these days, but apparently an important part of having a blog is actually having content on it, and given that I don&rsquo;t have anything new to share or any cool tools to release. I kind of drew a blank about what to write about.</p>
<p>So why did I pick PowerShell&hellip;</p>
<p>There are a few reasons I&rsquo;m going to debut with the topic of PowerShell.</p>
<ul>
<li>Firstly, I&rsquo;m not very good at PowerShell. I find for me that writing something down and attempting to explain it to others is a pretty good guarantee that I understand something. This will also have the benefit of tracking my progress over time.</li>
<li>Secondly, I want to share knowledge. I don&rsquo;t know a lot, but I hope that I might be able to explain something in a way that perhaps helps someone understand something better. Even if just one person benefits then I consider it a win. Maybe I might even teach someone something new, who knows.</li>
<li>Thirdly, I really like PowerShell as a tool, and have found it to be very useful to me in my job. So much tooling is built with PowerShell, from <a href="https://github.com/EmpireProject/Empire">C2 frameworks</a> to working with any Microsoft Product (including <a href="https://docs.microsoft.com/en-us/powershell/azure/?view=azps-3.8.0">Azure</a> and O365). It is not the be all and end all, but I have found it to have excellent documentation with a large community.</li>
<li>Bonus reason. Also, given how a lot of PowerShell is built and well integrated around C# and .Net I have found it a bit of gateway drug to C# (also  <a href="https://twitter.com/TheColonial">OJ&rsquo;s</a> influence <a href="https://twitter.com/TheColonial"></a>and his streams of building a <a href="https://github.com/OJ/clr-meterpreter">CLR Meterpreter</a>), I have a goal of further down the road teaching myself more and more C#</li>
</ul>
<p>I hope this will be a productive venture. For you, the reader, and also for me.</p>
<p>Only time will tell&hellip;</p>
<p>Thanks</p>
]]></content>
		</item>
		
		<item>
			<title>Hello</title>
			<link>https://archb1sh0p.github.io/posts/hello/</link>
			<pubDate>Fri, 15 May 2020 21:59:20 +0000</pubDate>
			
			<guid>https://archb1sh0p.github.io/posts/hello/</guid>
			<description>Finally time to revive this, I have decided to start writing more.
Archbishop</description>
			<content type="html"><![CDATA[<p>Finally time to revive this, I have decided to start writing more.</p>
<p>Archbishop</p>
]]></content>
		</item>
		
	</channel>
</rss>
